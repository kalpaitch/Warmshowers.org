<?php
/**
 * @file
 * Adds warmshowers.org fields to the User registration and display
 * Many miscellaneous services like user searches and reports
 */

// This is included since hook_search() uses geographic info. Probably WRONG.
module_load_include('inc', 'user_location', 'earth');

/**
 *
 * Implements hook_permission()
 */
function wsuser_permission() {
  return array(
    "full member lists" => array(
      'title' => t("Access Full Member Lists"),
      'description' => t('TODO Add a description for "full member lists"'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function wsuser_menu() {
  $items['user/%user/admin_details'] = array(
    'title' => 'Admin details',
    'page callback' => 'wsuser_admin_details_page',
    'page arguments' => array(1),
    'access arguments' => array('administer users'),
  );
  $items['country_count'] = array(
    'title' => 'Member Statistics',
    'page callback' => 'wsuser_country_counts',
    'access callback' => TRUE,
  );
  $items['admin/config/people/wsuser'] = array(
    'title' => 'WSuser Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wsuser_configuration'),
    'access arguments' => array('administer site configuration'),
    'weight' => 10,
  );
  $items['user/%user/admin'] = array(
    'title' => 'misc admin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wsuser_change_user_dates_form', 1),
    'access arguments' => array('administer users'),
    'weight' => 11,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function wsuser_theme() {
  global $user;
  $template_path = drupal_get_path('module', 'wsuser') . '/templates';

  return array(
    'email_addr' => array(
      'variables' => array('email' => NULL),
    ),
    'email_link' => array(
      'variables' => array('userobj' => NULL),
    ),
    'wsuser_member_welcome_block' => array(
      'variables' => array('menu' => NULL, 'account' => user_load($user->uid)),
      'path' => $template_path,
      'template' => 'wsuser-member-welcome-block',
    ),
    'wsuser_member_contact_location' => array(
      'path' => $template_path,
      'template' => 'wsuser-member-contact-location-block',
    ),
    'wsuser_member_actions' => array(
      'path' => $template_path,
      'template' => 'wsuser-member-actions-block',
    ),
    'wsuser_member_donate' => array(
      'path' => $template_path,
      'template' => 'wsuser-member-donate-block',
    ),
    'linkbutton' => array(
      'variables' => array('link' => NULL),
    ),
    'linkbuttons' => array(
      'variables' => array('links' => NULL),
    ),
    'wsuser_search_result' => array(
      'variables' => array('result' => NULL, 'module' => NULL),
      'path' => $template_path,
      'template' => 'wsuser-search-result',
    ),
    'wsuser_member_profile_highlight' => array(
      'variables' => array('result' => NULL, 'module' => NULL),
      'path' => $template_path,
      'template' => 'wsuser-member-profile-highlight-block',
    ),

  );
}

/**
 * Implements hook_variable_info(), provided by variable module
 * This is required for variables to be translatable.
 * @param $options
 * @return array
 */
function wsuser_variable_info($options) {
  $variable = array();
  $variable['wsuser_notavailable_reminder_subject'] = array(
    'type' => 'string',
    'title' => t('Warmshowers user Not Available Reminder Email Subject', array(), $options),
    'default' => 'Your Warmshowers account is marked unavailable. Please update your return date. ([fullname])',
    'localize' => TRUE,
    'group' => 'warmshowers',
  );
  $variable['wsuser_notavailable_reminder_body'] = array(
    'type' => 'text',
    'title' => t('Warmshowers user Not Available Reminder Email Body', array(), $options),
    'default' => "Hi [fullname], <br/><br/>Your warmshowers.org account, [user], is marked as unavailable to host. Could you please log in and set the date that you expect to return? If you don't know when or if you'll be able to host, just put in a date like 2025-01-01. You can change it at any time. You can log in with your username and password at <a href='https://www.warmshowers.org'>www.warmshowers.org</a> or <a href='[login_url]'>click this link to log in automatically</a><br/><br/>-Randy Fay<br/>Warmshowers.org Webmaster<br/>---<br/><a href='[account-url]'>Profile link</a><br/><a href='[account-edit-url]'>Edit profile link</a><br/><a href='[login_url]'>Direct login link</a><br/>",
    'localize' => TRUE,
    'group' => 'warmshowers',

  );
  $variable['wsuser_become_available_notification_subject'] = array(
    'type' => 'string',
    'title' => t('Warmshowers user Notify Users They Are Now Available Email Subject', array(), $options),
    'default' => 'You are now listed as available to host on Warmshowers.org ([fullname])',
    'localize' => TRUE,
    'group' => 'warmshowers',

  );
  $variable['wsuser_become_available_notification_body'] = array(
    'type' => 'text',
    'title' => t('Warmshowers user Notify Users They Are Now Available Email Body', array(), $options),
    'default' => "Hi [fullname] - <br/><br/>Your Warmshowers.org account, [user], has been automatically updated to show you as \"available to host\" because the date that you specified you would become available after has passed. If you are still unavailable to host please log into Warmshowers.org and update your account. You can log in by visiting the site or just <a href='[login_url]'>clicking this link</a>. Thanks!<br/><br/>-Randy Fay<br/>Warmshowers.org Webmaster<br/>---<br/><a href='[account-url]'>Profile link</a><br/><a href='[account-edit-url]'>Edit profile link</a><br/><a href='[login_url]'>Direct login link</a><br/>",
    'localize' => TRUE,
    'group' => 'warmshowers',

  );
  return $variable;
}

/**
 * Implements hook_variable_group_info()
 * (which is via variable module)
 * @return mixed
 */
function wsuser_variable_group_info() {
  $groups['warmshowers'] = array(
    'title' => t('Warmshowers'),
    'access' => 'administer site',
    'path' => 'admin/config/people/wsuser',
  );
  return $groups;
}

/**
 * Theme a link as a button.
 * @param $link
 *   Array of
 *   - title: The text to be displayed
 *   - href: The path for the link.
 *   - classes: Classes to add to link
 */
function theme_linkbutton($variables) {
  $classes = !empty($variables['link']['classes']) ? $variables['link']['classes'] : '';
  $classes .= " linkbutton rounded";
  print l($variables['link']['title'], $variables['link']['href'], array(
    'options' => array('absolute' => FALSE),
    'attributes' => array('class' => $classes)
  ));
}

/**
 * Theme an array of links as a button.
 *
 * @see theme_linkbutton()
 *
 * @param $links
 */
function theme_linkbuttons($variables) {
  $links = $variables['links'];
  foreach ($links as $link) {
    print theme('linkbutton', array('link' => $link));
  }
}

/**
 * Implements hook_tokens().
 * @param $type
 *   As in type of 'user'
 * @param $tokens
 *   Array of tokens to be replaced
 * @param $data
 *   Associative array of data objects to be replaced
 * @param $options
 *   An associative array of options for token replacement; see token_replace() for possible values.
 * @return array
 */
function wsuser_tokens($type, $tokens, $data = array(), $options = array()) {

  $url_options = array('absolute' => TRUE);
  if (isset($options['language'])) {
    $url_options['language'] = $options['language'];
    $language_code = $options['language']->language;
  }
  else {
    $language_code = NULL;
  }
  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  if ($type == 'user' && !empty($data['user'])) {
    $account = user_load($data['user']->uid);
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'fullname':
          $replacements[$original] = $sanitize ? check_plain($account->fullname) : $account->fullname;
          break;
        case 'about_me':
          $replacements[$original] = $sanitize ? check_plain($account->comments) : $account->comments;
          break;
        case 'notcurrentlyavailable':
          $replacements[$original] = $account->notcurrentlyavailable;
          break;
        case 'validate_url':
          $replacements[$original] = wsuser_validate_url($account);
          break;
        case 'login_url':
          $replacements[$original] = wsuser_pass_reset_url($account);
          break;
        case 'email_opt_out':
          $replacements[$original] = $account->email_opt_out;
          break;
        case 'hide_donation_status':
          $replacements[$original] = $account->hide_donation_status;
          break;
        case 'languagesspoken':
          $languages = language_list();
          $user_language = $languages[$account->language]->name;
          $replacements[$original] = "{$user_language} " . ($sanitize ? filter_xss($account->languagesspoken) : $account->languagesspoken);
          break;
        case 'servicesoffered':
          $replacements[$original] = _wsuser_account_services_list($account);
          break;

        // TODO: source, country, province, city are user_location, not wsuser - should move there
        case 'source':
          $replacements[$original] = $account->source;
          break;
        case 'country':
          $replacements[$original] = $sanitize ? check_plain($account->country) : $account->country;
          break;
        case 'province':
          $replacements[$original] = $sanitize ? check_plain($account->province) : $account->province;
          break;
        case 'city':
          $replacements[$original] = $sanitize ? filter_xss($account->city) : $account->city;
          break;

      }

    }
  }
  return $replacements;
}

/**
 * Implements hook_token_info()
 */
function wsuser_token_info() {
  $tokens = array();
  $tokens['user']['fullname'] = array(
    'name' => t('Full name'),
    'description' => t("The user's fullname"),
  );
  $tokens['user']['about_me'] = array(
    'name' => 'About me',
    'description' => t("The 'about me' from user's profile"),
  );
  $tokens['user']['notcurrentlyavailable'] = array(
    'name' => t('Not Currently Available'),
    'description' => t("User's availability status")
  );
  $tokens['user']['howdidyouhear'] = array(
    'name' => t('How Did You Hear'),
    'description' => t("How did you hear about WarmShowers.org?")
  );
  $tokens['user']['validate_url'] = array(
    'name' => t('Validation URL'),
    'description' => t('Validation URL (logintoboggan)')
  );
  $tokens['user']['login_url'] = array(
    'name' => t('One-time Login URL'),
    'description' => t('One-time login URL/Password reset URL')
  );
  $tokens['user']['email_opt_out'] = array(
    'name' => t('Email Opt Out'),
    'description' => t('Email opt-out')
  );
  $tokens['user']['hide_donation_status'] = array(
    'name' => t('Hide donation status'),
    'description' => t('Hide donation status')
  );
  $tokens['user']['languagesspoken'] = array(
    'name' => t('Languages Spoken'),
    'description' => t('Languages Spoken field')
  );
  $tokens['user']['servicesoffered'] = array(
    'name' => t('Services Offered'),
    'description' => t('Concatenated list of services offered'),
  );


  // TODO: Country, province, city are actually functions of user_location and should be in its token implementation
  $tokens['user']['source'] = array(
    'name' => t('Geocoding accuracy'),
    'description' => t("Geocoding accuracy of location info"),
  );
  $tokens['user']['country'] = array(
    'name' => t('Country'),
    'description' => t("User's country")
  );
  $tokens['user']['province'] = array(
    'name' => t('Province'),
    'description' => t("User's province")
  );
  $tokens['user']['city'] = array(
    'name' => 'City',
    'description' => t("User's city")
  );
  return array('tokens' => $tokens);
}

/**
 * Return a list of services offered on an account, for use by tokenizing
 *
 * @param $account
 * @return null|string
 */
function _wsuser_account_services_list($account) {
  // Copied from proprocess function
  $services = array(
    "bed",
    "food",
    "laundry",
    "lawnspace",
    "sag",
    "shower",
    "storage",
    "kitchenuse",
  );

  $fieldlist = wsuser_fieldlist();
  $results = array();
  foreach ($services as $item) {
    if (!empty($account->$item)) {
      $results[] = t($fieldlist[$item]['title']);
    }
  }
  if (empty($results)) {
    return t('(No Services Offered)');
  }
  return implode(', ', $results);
}

/**
 * Implements hook_action_info().
 */
function wsuser_action_info() {
  return array(
    'wsuser_resend_validation_link_action' => array(
      'label' => t('Resend validation link as from logintoboggan'),
      'type' => 'user',
      'configurable' => FALSE,
      'triggers' => array('any' => TRUE),
    ),
  );
}


/**
 * Implements hook_mail().
 *
 * Applies Warmshowers-based token manipulation to the subject and message
 *
 * logintoboggan_resend_validation is, of course, brought over from logintoboggan
 * but had to be redone here to use i18n_variable_get() instead of just variable_get().
 */
function wsuser_mail($key, &$message, $params) {

  $account = $params['account'];
  $langcode = $account->language;

  switch ($key) {
    case 'logintoboggan_resend_validation':
      $message['subject'] .= token_replace(i18n_variable_get('user_mail_register_no_approval_required_subject', $langcode, "No subject"), array('user' => $account), array('language' => $langcode));
      $message['body'][] = token_replace(i18n_variable_get('user_mail_register_no_approval_required_body', $langcode, "No body"), array('user'), array('language' => $langcode));
      break;

    // Availability reminders and notifications. Assumes the variable will be properly set!
    // That makes this inaccessible to translators, unfortunately. Yuckie.
    // And it will require a UI to update.
    case 'notavailable_reminder':
      $message['subject'] .= token_replace(i18n_variable_get('wsuser_notavailable_reminder_subject', $langcode, 'Your Warmshowers account is still marked unavailable'), array('user' => $account), array('language' => $langcode));
      $message['body'][] = token_replace(i18n_variable_get('wsuser_notavailable_reminder_body', $langcode, 'If you are once again available to host, please log into Warmshowers.org and update your account. Thanks!'), array('user' => $account), array('language' => $langcode));
      break;

    case 'become_available_notification':
      $message['subject'] .= token_replace(i18n_variable_get('wsuser_become_available_notification_subject', $langcode, 'Your Warmshowers account is now marked as available'), array('user' => $account), array('language' => $langcode));
      $message['body'][] = token_replace(i18n_variable_get('wsuser_become_available_notification_body', $langcode, 'Your account has been automatically updated to available to host because the date that you specified you would become available after has passed. If you are still unavailable to host please log into Warmshowers.org and update your account. Thanks!'), array('user' => $account), array('language' => $langcode));
      break;
  }
}

/**
 * Implements hook_views_data()
 */
function wsuser_views_data() {
  $data = array();
  $data['wsuser']['table']['group'] = t("Warmshowers");
  $data['wsuser']['fullname'] = array(
    'title' => t('Full Name'),
    'help' => t("Member's full name."), // The help that appears on the UI,
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $data['wsuser']['notcurrentlyavailable'] = array(
    'title' => t('Not Currently Available'),
    'help' => t("Set to TRUE if member not currently hosting."),
    // The help that appears on the UI,
    'field' => array(
      'handler' => 'views_handler_field_boolean',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_boolean_operator',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
  );
  $data['wsuser']['fax_number'] = array(
    'title' => t('Fax Number'),
    'help' => t("Fax Number."),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $data['wsuser']['mobilephone'] = array(
    'title' => t('Mobile Phone Number'),
    'help' => t("Mobile Phone Number."), // The help that appears on the UI,
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $data['wsuser']['workphone'] = array(
    'title' => t('Work Phone Number'),
    'help' => t("Work Phone Number."), // The help that appears on the UI,
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $data['wsuser']['homephone'] = array(
    'title' => t('Home Phone Number'),
    'help' => t("Home Phone Number."), // The help that appears on the UI,
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  $data['wsuser']['preferred_notice'] = array(
    'title' => t('Preferred Notice'),
    'help' => t("Preferred Notice."),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  $data['wsuser']['URL'] = array(
    'title' => t('Website URL'),
    'help' => t("Website URL."),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
  );

  $data['wsuser']['languagesspoken'] = array(
    'title' => t('Languages Spoken'),
    'help' => t("Languages Spoken"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
  );

  $data['wsuser']['maxcyclists'] = array(
    'title' => t('Max Cyclists'),
    'help' => t("Maximum number of guests that can be accomodated."),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
  );

  $data['wsuser']['comments'] = array(
    'title' => t('About Me'),
    'help' => t("Member's info about self."),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => FALSE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );


  $data['wsuser']['howdidyouhear'] = array(
    'title' => t('How did you hear about Warmshowers.org?'),
    'help' => t("How member heard about site'."),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => FALSE,
    ),
  );

  $bools = "storage motel campground bikeshop shower kitchenuse lawnspace sag bed laundry food hide_donation_status email_opt_out";
  foreach (explode(' ', $bools) as $item) {
    $data['wsuser'][$item] = array(
      'title' => t($item),
      'help' => t($item),
      'field' => array(
        'handler' => 'views_handler_field_boolean',
        'click sortable' => TRUE,
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_boolean_operator',
      ),
      'sort' => array(
        'handler' => 'views_handler_sort',
      ),
    );
  }
  $data['wsuser']['table']['join'] = array(
    'users' => array(
      // direct join to the users table via 'uid' field.
      'left_field' => 'uid',
      'field' => 'uid',
    ),
  );
  return $data;

}


/**
 * Implements hook_form_alter() to specialize the search form and the user registration form().
 */
function wsuser_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'search_form') {
    switch ($form['#action']) {
      case '/search/wsuser':
        $form['basic']['keys']['#title'] = t('Enter member names or cities');
        $form['basic']['keys']['#description'] = t('Search for members by a part of their name (like "Martinez", for example) or by the town they live in. A special case allows search by distance, with latitude and longitude separated by pipe symbols (|)');
        break;
      case '/search/user':
        $form['basic']['keys']['#title'] = t('Search by username or partial username');
        $form['basic']['keys']['#description'] = t('Search for members by a part of their username (like "randyfay", for example).');
        break;
      case '/search/node':
        $form['basic']['keys']['#title'] = t('Enter your keywords to search site content (postings, forums, etc.)');
        $form['basic']['keys']['#description'] = t('Search for content on the website ("Frequently Asked Questions", for example).');
        break;
    }
  }
  if ($form_id == 'user_profile_form' || $form_id == 'user_register_form') {
    $form['account']['#weight'] = -9;
    $form['location']['#weight'] = -5;
    $form['account']['mail']['#description'] = t('A
<i>valid</i> e-mail address that you check regularly. All e-mails from the system will be sent to this address, and this is the most common way for members to contact you. The e-mail address is not displayed on the site. You will have to confirm this email address.');
  }

  if ($form_id == 'user_pass') {
    $form['instructions'] = array(
      '#markup' => '<br/>' . t('You will receive a login link that will expire in 24 hours, so you need to use it by then. <br/><br/>Remember that you need to whitelist wsl@warmshowers.org on your email account. <a href="/spam_filters">Details on how to do it are here</a>'),
      '#weight' => 9,
    );
  }

}

/**
 * Implements hook_menu_alter().
 * Fix search/* to have the wsuser first, and more descriptive titles.
 * @param $items
 * @return unknown_type
 */
function wsuser_menu_alter(&$items) {
  $items['search/wsuser/%menu_tail']['weight'] = -10;
  $items['search/user/%menu_tail']['weight'] = -8;
  $items['search/user/%menu_tail']['title'] = t("usernames");
  unset($items['search/user/%menu_tail']['title callback']);
  unset($items['search/user/%menu_tail']['title arguments']);
  $items['search/node/%menu_tail']['title'] = t("site content");
  unset($items['search/node/%menu_tail']['title callback']);
  unset($items['search/node/%menu_tail']['title arguments']);

}

/**
 * Implements hook_search_info()
 *
 * @return array
 */
function wsuser_search_info() {
  return array(
    'title' => 'Warmshowers User',
    'path' => 'wsuser',
  );
}

/**
 * Implments hook_search_access()
 *
 * @return bool
 */
function wsuser_search_access() {
  return user_access('access user profiles');
}

/**
 * Implements hook_search_execute().
 */
function wsuser_search_execute($keys = NULL, $conditions = NULL) {
  $latitude = $longitude = NULL;
  // Replace wildcards with MySQL/PostgreSQL wildcards.
  $keys = preg_replace('!\*+!', '%', $keys);
  // If this search provides lat/lon, then do the search based on location only.

  $list = preg_split('/\|/', $keys);
  if (count($list) > 2) {
    list($locname, $latitude, $longitude) = preg_split('/\|/', $keys);
  }

  try {
    $query = db_select('users', 'u')->extend('PagerDefault');
    $query->join('wsuser', 'w', 'u.uid = w.uid');
    $query->join('user_location', 'ul', 'u.uid = ul.oid');
    $query->fields('u', array('uid'));

    // If distance search, add the distance calc, ordering, and limitation
    if (is_numeric($latitude) && is_numeric($longitude)) {
      $query->addExpression('SQRT(POW(69.1 * (ul.latitude - :lat), 2) + POW(69.1 * (:lng - ul.longitude) * COS(ul.latitude / 57.3), 2))', 'distance', array(
        ':lat' => $latitude,
        ':lng' => $longitude
      ));
      $query->orderBy('distance');
    }
    // Otherwise just a simple keyword search. Use a bogus distance
    else {
      $query->addExpression(-1, 'distance');
      $query->condition('u.status', 1)
        ->condition(db_or()
          ->condition('u.name', db_like($keys) . '%', 'LIKE')
          ->condition('w.fullname', '%' . db_like($keys) . '%', 'LIKE')
          ->condition('ul.city', db_like($keys) . '%', 'LIKE')
          ->condition('u.mail', db_like($keys) . '%', 'LIKE'));
    }

    // Admin users should be able to find unvalidated, but normal users should not
    if (!user_access('administer users')) {
      $query->where('u.uid NOT IN (SELECT uid FROM {users_roles} WHERE rid = :rid)', array(':rid' => 9));
    }

    // Get array of users matching- array of uid => distance
    $users = $query
      ->limit(variable_get('wsuser_search_results_page', 50))
      ->execute()
      ->fetchAllKeyed(0, 1);

  } catch (Exception $e) {
    watchdog_exception('wsuser', $e);
    drupal_set_message(t('Error in search - please contact administrator with the details'), 'error');
    return;
  }

  $accounts = user_load_multiple(array_keys($users));

  $countrylist = _locationservices_supported_countries();
  foreach ($accounts as &$account) {
    $account->distance = $users[$account->uid];
    $account->location = $account->city . ", $account->province, " . $countrylist[$account->country];
  }
  return $accounts;
}

/**
 * Implements hook_search_page().
 *
 * @param results
 *   Array of fully-populated $accounts (keyed by uid) with member info.
 * @return array
 *   Renderable array.
 */
function wsuser_search_page($accounts) {
  $output['prefix']['#markup'] = '<ol class="search-results">';

  if (!empty($accounts)) {
    foreach ($accounts as $account) {
      $output[] = array(
        '#theme' => 'wsuser_search_result',
        '#result' => $account,
        '#module' => 'wsuser',
      );
    }
  }
  else {
    $output['#markup'] = t('Your search yielded no results');
  }
  $output['suffix']['#markup'] = '</ol>' . theme('pager');
  return $output;
}

/**
 * Process variables for wsuser-search-result.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $result
 * - $module
 *
 * @TODO: Rename.
 *
 * @see search-result.tpl.php
 */
function template_preprocess_wsuser_search_result(&$variables) {
  global $language;
  $max_comment_length = 300;

  $result = $variables['result'];
  $variables['url'] = url("user/{$result->uid}");
  $variables['fullname'] = filter_xss($result->fullname);
  $variables['location_plain'] = filter_xss($result->city) . ', ' . drupal_strtoupper($result->province) . ', ' . drupal_strtoupper($result->country);
  $variables['about_me'] = truncate_utf8($result->comments, $max_comment_length, TRUE, TRUE);
  if ($result->distance > 0) {
    $variables['distance'] = number_format($result->distance * 1.609344, 0) . ' km/' .
      number_format($result->distance, 0) . ' mi';
  }

  $variables['location_link'] = l($variables['location_plain'], "user/{$result->uid}}/maponly/8", array(
    'query' => array(
      'width' => '90%',
      'height' => '90%',
      'iframe' => 'true'
    )
  ));
}

/**
 * Implements hook_user_load() to add wsuser values to user object
 */
function wsuser_user_load($accounts) {
  $result = db_query('SELECT * FROM {wsuser} WHERE uid IN (:uids)',
    array(':uids' => array_keys($accounts)), array('fetch' => PDO::FETCH_OBJ));
  foreach ($result as $row) {
    foreach ($row as $key => $value) {
      $accounts[$row->uid]->$key = $value;
    }
  }
}

/**
 * Implements hook_user_delete() to delete wsuser entry on user deletion
 *
 */
function wsuser_user_delete($account) {
  try {
    db_delete('wsuser')->condition('uid', $account->uid)->execute();
  } catch (Exception $e) {
    watchdog_exception('wsuser', $e);
  }

}

/**
 * Implements hook_user_login()
 *
 * @param $edit
 * @param $account
 */
function wsuser_user_login(&$edit, &$account) {
  $countries = _locationservices_supported_countries();
  $browser_cc = user_location_get_browser_country();
  $browser_countryname = @$countries[user_location_get_browser_country()];
  if (empty($browser_countryname)) {
    $browser_countryname = t('Unknown');
  }

  if (function_exists('user_location_get_browser_country')) {
    watchdog('user', "{$account->name} login from " . $browser_countryname);
  }

  if (!empty($account->notcurrentlyavailable)) {
    drupal_set_message(t('Your account is set to "Not Currently Available" so you will not show on the map or receive guest requests.'));
    if (empty($account->picture)) {
      drupal_set_message(t('You have not uploaded a picture yet. Please upload a picture to improve your chances to find hosts or guests. !link', array('!link' => l(t('Upload your picture by editing your profile.'), 'user/' . $account->uid . '/edit'))));
    }
  }

  // Note browscap settings in watchdog
  if (module_exists('browscap')) {
    $browser = (object) browscap_get_browser();
    watchdog("browser", "browser=$browser->browser, version=$browser->version, platform=$browser->platform (" . var_export($browser, TRUE) . ")");
  }

  $languages = variable_get('wsuser_show_donate_login_languages', array('en-working'));
  if (!wsuser_is_current_donor_member($account) && !wsuser_is_nondonor_member($account) && (arg(0) != 'donate') && in_array($account->language, $languages)) {
    drupal_set_message(t('We are asking every member to choose a donation level. Please !choose Thanks!', array('!choose' => l('choose a donation level', 'donate'))));
  }
}


/**
 * Implements hook_user_update()
 *
 * @param $edit
 * @param $account
 * @param $category
 */
function wsuser_user_update(&$edit, &$account, $category) {
  wsuser_user_insert($edit, $account, $category);
}

/**
 * Implements hook_user_insert()
 *
 * @param $edit
 * @param $account
 * @param $category
 */
function wsuser_user_insert(&$edit, &$account, $category) {
  // Support values for when they changed their notcurrentlyavailable, etc.

  // If they're changing *to* not available, set the unavailable timestamp and make
  // this the beginning of the unavailability pester cycle.
  if (!empty($edit['notcurrentlyavailable']) && empty($account->notcurrentlyavailable)) {
    $edit['set_unavailable_timestamp'] = (int) REQUEST_TIME;
    $edit['last_unavailability_pester'] = (int) REQUEST_TIME;
    $edit['set_available_timestamp'] = 0;
    drupal_set_message(t('You have set your account to "Not Currently Available" and you will be reminded about this by email from time to time. Please read the FAQ for more information.'));
  }
  // Otherwise, if they're switching from not available, set this as the beginning
  // of the availability cycle, and unset the other stuff.
  else {
    if (array_key_exists('notcurrentlyavailable', $edit) && empty($edit['notcurrentlyavailable']) && (!empty($account->notcurrentlyavailable) || !isset($account->notcurrentlyavailable))) {
      $edit['set_available_timestamp'] = (int) REQUEST_TIME;
      $edit['set_unavailable_timestamp'] = 0;
      $edit['last_unavailability_pester'] = 0;
      drupal_set_message(t('You have unchecked "Not Currently Available" so your location will be shown on the map and you may receive guest requests.'));

    }
  }

  $fields = array();

  foreach (array_keys(wsuser_fieldlist()) as $key) {
    if (array_key_exists($key, $edit)) {
      $fields[$key] = $edit[$key];
      // Setting $edit[$key] to NULL removes it from $user->data. However, there
      // are many features in this site that assume this stuff will be in the normally-loaded
      // global $user, so not doing this at this point. rfay 20150129
      // $edit[$key] = NULL;  // Required by hook_user_xx so it knows the field has been done
    }
  }
  if (!empty($fields)) {
    try {
      db_merge('wsuser')
        ->key(array('uid' => $account->uid))
        ->fields($fields)
        ->execute();
    } catch (Exception $e) {
      watchdog_exception('wsuser', $e);
      drupal_set_message(t('Failed saving wsuser information'), 'error');
    }
  }
}

/**
 * Implements hook_user_view()
 *
 * @param $user
 * @return array
 */
function wsuser_user_view($account, $view_mode, $langcode) {

  $fieldlist = wsuser_fieldlist();
  $showvalue = array();

  unset($fieldlist['howdidyouhear'], $fieldlist['hide_donation_status'], $fieldlist['email_opt_out']); // Don't need these in the output

  foreach ($fieldlist as $key => $value) {
    if (!empty($account->$key)) {
      $showvalue[$key] = array(
        '#type' => 'user_profile_item',
        '#title' => $value['title'],
        '#markup' => check_markup($account->$key),
        // '#weight' => $field->weight,
        '#attributes' => array('class' => array('profile-' . $key)),
      );
    }
  }
  $account->content['wsuser'] = $showvalue;

}


/**
 * A list of fields to be loaded/saved/presented on the user edit form.
 *
 * This wraps the Form API to build the load/save/form processes. This is where
 * you add new fields (and in the install file)
 *
 * @return array
 */
function wsuser_fieldlist() {
  $fields = array(
    'fullname' => array(
      'type' => 'textfield',
      'title' => t('Full Name'),
      'description' => t("Please enter your full name (including last name)"),
      'required' => TRUE,

    ),
    'comments' => array(
      'title' => t("About You"),
      'type' => 'textarea',
      'rows' => '5',
      'cols' => '40',
      'required' => TRUE,
      'description' => t("Please introduce yourself. Say something about your hosting capabilities, cycle touring experience, or your current trip if you're on one right now. <em><strong>You must put something descriptive here or your account will be deleted.</strong></em> Also, please mention any restrictive or distinctive things about you: Are you vegetarian? Have pets? Smoker? Allergies? "),

    ),
    'notcurrentlyavailable' => array(
      'type' => 'checkbox',
      'title' => t('Not Currently Available'),
      'description' => t('Check this if you are not currently available to host cyclists. Please add a note to the "About Me" section saying why you\'re not available to host, and remember to uncheck it when you become available. Checking this box leaves you off the map, and off most of the lists.'),

    ),
    'becomeavailable' => array(
      'type' => 'date',
      'title' => t('Will Become Available To Host'),
      'description' => t('If you are permanently unavailable to host, just set this to a date far in the future.'),
      'default' => REQUEST_TIME + 3600 * 24 * variable_get('wsuser_default_becomeavailable_days', 5 * 365),
    ),
    'homephone' => array(
      'type' => 'textfield',
      'title' => t("Home Phone Number"),

    ),
    'mobilephone' => array(
      'type' => 'textfield',
      'title' => t("Mobile Phone"),
    ),
    'workphone' => array(
      'type' => 'textfield',
      'title' => t("Work Phone Number"),
    ),
    //    'fax_number' => array( //      'type' => 'textfield', //      'title' => t("Fax Number"), //
    'preferred_notice' => array(
      'type' => 'textfield',
      'title' => t('Preferred Notice'),
      'description' => t("If you require significant advance notice, please mention it here. <em>All cyclists should give as much notice as possible.</em>"),

    ),
    'maxcyclists' => array(
      'type' => 'select',
      'title' => t("Maximum Guests"),
      'description' => t("Maximum number of cyclists you could host at one time"),
      'options' => array(
        1 => "1",
        2 => "2",
        3 => "3",
        4 => "4",
        5 => t("5 or more"),
      ),
    ),
    'motel' => array(
      'type' => 'textfield',
      'title' => t("Distance to nearest hotel/motel"),
    ),
    'campground' => array(
      'type' => 'textfield',
      'title' => t("Distance to nearest campground"),

    ),
    'bikeshop' => array(
      'type' => 'textfield',
      'title' => t("Distance to nearest bike shop"),
    ),
    'languagesspoken' => array(
      'type' => 'textfield',
      'title' => t('Languages spoken'),
    ),
    'URL' => array(
      'type' => 'textfield',
      'title' => t("Website"),
      'description' => t("URL of your website, if any, in form http://yourwebsite.com. Leave it blank if you don't have one."),
    ),
    'bed' => array(
      'type' => 'checkbox',
      'title' => t('Bed'),
    ),
    'food' => array(
      'type' => 'checkbox',
      'title' => t('Food'),
    ),
    'laundry' => array(
      'type' => 'checkbox',
      'title' => t('Laundry'),
    ),
    'lawnspace' => array(
      'type' => 'checkbox',
      'title' => t('Lawn Space (for camping)'),
    ),
    'sag' => array(
      'type' => 'checkbox',
      'title' => t('SAG (vehicle support)'),
    ),
    'shower' => array(
      'type' => 'checkbox',
      'title' => t('Shower'),
    ),
    'storage' => array(
      'type' => 'checkbox',
      'title' => t('Storage'),

    ),
    'kitchenuse' => array(
      'type' => 'checkbox',
      'title' => t('Use of Kitchen'),
    ),
    'howdidyouhear' => array(
      'type' => 'textfield',
      'title' => t("Please let us know how you heard about WarmShowers.org"),
    ),
    'set_unavailable_timestamp' => array(
      'type' => 'hidden',
      'title' => t('Unavailable timestamp'),
    ),
    'set_available_timestamp' => array(
      'type' => 'hidden',
      'title' => t('Available timestamp'),
    ),
    'last_unavailability_pester' => array(
      'type' => 'hidden',
      'title' => t('Last Unavailability Pester'),
    ),
    'hide_donation_status' => array(
      'type' => 'checkbox',
      'title' => t('Do not show donation status on my profile'),
    ),
    'email_opt_out' => array(
      'type' => 'checkbox',
      'title' => t('Opt out of non-essential emails'),
      'description' => t('Most emails from the site (like message notifications) are mandatory, but you can opt out most of newsletter or donation emails.'),

    ),
  );
  return $fields;
}

/**
 * Set default form values for account form
 *
 * @param $form_state_values
 *   $form_state['values'] from form (if being resubmitted
 * @param $account
 *
 * @return array
 */
function wsuser_form_defaults($form_state_values, $account) {
  $defaults = array();
  $fields = wsuser_fieldlist();

  foreach ($fields as $field => $value) {

    // Choose the default for the field from
    // 1) The edit/value
    // 2) The account default
    // 3) the default provided in wsuser_fieldlist()
    // 4) ""
    $default = !empty($value['default']) ? $value['default'] : "";
    if (!empty($form_state_values[$field])) {
      $default = $form_state_values[$field];
    }
    else {
      if (!empty($account->$field)) {
        $default = $account->$field;
      }
    }
    $defaults[$field] = $default;

    // Special handling for becomeavailable to turn it into array
    if ($field == 'becomeavailable') {
      list($x, $x, $x, $day, $month, $year) = localtime($default);
      $defaults['becomeavailable'] = array(
        'year' => $year + 1900,
        'month' => $month + 1,
        'day' => $day,
      );
    }
  }

  return $defaults;
}


/**
 * Implements hook_form_FORMID_alter() for user registration
 *
 * @param $form
 * @param $form_state
 */
function wsuser_form_user_register_form_alter(&$form, &$form_state) {
  wsuser_form_user_profile_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORMID_alter() to add fields to user profile form
 */
function wsuser_form_user_profile_form_alter(&$form, &$form_state) {

  $account = $form['#user'];

  $form['#validate'][] = '_wsuser_user_form_validate';
  drupal_add_js(drupal_get_path('module', 'wsuser') . '/js/profile.js');

  // Fieldset to emphasize the current availability for the user.
  $form['wsstatus'] = array(
    '#type' => 'fieldset',
    '#title' => t("Current Hosting Status"),
  );

  $form['wsuser'] = array(
    '#type' => 'fieldset',
    '#title' => t("Member Information"),
  );

  $form['wsuser_profile_config'] = array(
    '#type' => 'fieldset',
    '#title' => t("Profile configuration"),
  );

  $defaults = wsuser_form_defaults(!empty($form_state['values']) && is_array($form_state['values']) ? $form_state['values'] : array(), $account);
  $fieldlist = wsuser_fieldlist();

  // As of 2015-03-24 we're not doing a donation status block visible to others
  // Rather than completely deleting though I'm leaving this in and it could be turned
  // on by removing the line below.
  unset($fieldlist['hide_donation_status']);

  foreach ($fieldlist as $field => $attribs) {
    $arr = array();
    foreach ($attribs as $tag => $val) {
      $arr["#$tag"] = $val;
    }

    switch ($field) {
      case 'notcurrentlyavailable':
      case 'becomeavailable':
        $fieldset = 'wsstatus';
        break;
      case 'hide_donation_status':
      case 'email_opt_out':
        $fieldset = 'wsuser_profile_config';
        break;
      default:
        $fieldset = 'wsuser';
        break;
    }

    $form[$fieldset][$field] = $arr;
    if ($defaults[$field]) {
      $form[$fieldset][$field]['#default_value'] = $defaults[$field];
    }
  }
}


/**
 * Validate form-altered user edit form
 *
 * @param $edit
 * @param $account
 */
function _wsuser_user_form_validate($form, &$form_state) {
  $form_state['values']['URL'] = trim($form_state['values']['URL']);

  if ($form_state['values']['URL'] && !valid_url($form_state['values']['URL'], TRUE)) {
    form_set_error('URL', t("Please enter a valid URL (with http:// on the front) for your website"));
  }

  $fullname = $form_state['values']['fullname'];

  // If admin, allow the admin to leave the things in this section alone
  if (!user_access('administer users')) {
    if (!preg_match('/[^ ]+ +[^ ]+/', $fullname)) {
      form_set_error('fullname', t("Please enter your full name (at least first and last names), not a first name or 'handle'."));
    }

    $about_me = strip_tags(check_markup($form_state['values']['comments']));
    $about_me_words = array_filter(preg_split('/\s+/', $about_me));
    if (count($about_me_words) < 15) {
      form_set_error('comments', t("Please say something descriptive about yourself in the 'About You' field! Potential hosts or guests want to know about you. You must enter at least 15 words. Your account will be deleted if this is not meaningful."));
    }
  }
  if (!empty($form_state['values']['becomeavailable'])) {
    $ba = $form_state['values']['becomeavailable']['year'] . '-' . $form_state['values']['becomeavailable']['month'] . '-' . $form_state['values']['becomeavailable']['day'];
    $form_state['values']['becomeavailable'] = strtotime($ba);
  }
  // Force these values to be numeric
  foreach (array(
             'set_unavailable_timestamp',
             'set_available_timestamp',
             'last_unavailability_pester'
           ) as $field) {
    if (isset($form_state['values'][$field])) {
      $form_state['values'][$field] = (integer) $form_state['values'][$field];
    }
  }
}


/**
 * Implements hook_block_info() to provide the wsuser block descriptions
 */
function wsuser_block_info() {
  $blocks['wsuser_member_actions'] = array(
    'info' => t('Member actions block'),
    'cache' => DRUPAL_CACHE_PER_USER | DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['wsuser_member_donate'] = array(
    'info' => t('Member donate block'),
    'cache' => DRUPAL_CACHE_PER_USER | DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['wsuser_search_block'] = array(
    'info' => t('Member Search Block')
  );
  $blocks['wsuser_member_welcome_block'] = array(
    'info' => t('Welcome member'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );
  $blocks['wsuser_member_contact_location'] = array(
    'info' => t('[wsuser] Member Contact/Location Block'),
    'cache' => DRUPAL_CACHE_PER_USER | DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['wsuser_member_profile_highlight'] = array(
    'info' => t('Member highlight block'),
    'cache' => DRUPAL_CACHE_PER_USER | DRUPAL_CACHE_PER_PAGE,
  );


  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function wsuser_block_view($delta) {
  $block = array();

  switch ($delta) {
    case 'wsuser_member_actions':
      $block['subject'] = t('Actions');
      $block['content'] = theme('wsuser_member_actions');
      return $block;
    case 'wsuser_member_donate':
      $block['subject'] = t('Donation Information');
      $block['content'] = theme('wsuser_member_donate');
      return $block;
    case 'wsuser_search_block':
      $block['subject'] = t('Search');
      $block['content'] = drupal_get_form('wsuser_member_search_form');
      return $block;
    case 'wsuser_member_welcome_block':
      $block['subject'] = '<none>';
      $block['content'] = theme('wsuser_member_welcome_block');
      return $block;
    case 'wsuser_member_contact_location':
      $block['subject'] = t('Contact/Location');
      $block['content'] = theme('wsuser_member_contact_location');
      return $block;
    case 'wsuser_member_profile_highlight':
      $block['subject'] = t('<none>');
      $block['content'] = theme('wsuser_member_profile_highlight');
      return $block;
  }
}

/*
 * Preprocess function for hook_wsuser_member_block().
 */
function template_preprocess_wsuser_member_welcome_block(&$vars) {
  global $user;
  $vars['wsuser_member_welcome_block_menu_links'] = array(
    array(
      'title' => t('View Profile'),
      'href' => "user/{$user->uid}",
    ),
    array(
      'title' => t('Edit Profile'),
      'href' => "user/{$user->uid}/edit",
    ),
    array(
      'title' => t('Messages'),
      'href' => "user/{$user->uid}/messages",
    ),
    array(
      'title' => t('Update Location'),
      'href' => "user/{$user->uid}/location",
    ),
    array(
      'title' => t('Log Out'),
      'href' => 'user/logout',
    ),
  );
}

function wsuser_ajax_get_provinces_member_list($form, $form_state) {
  return $form['provinces'];
}


function ahah_render_member_list_form($fields, $name) {
  $form_state = array('submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  // Add the new element to the stored form. Without adding the element to the
  // form, Drupal is not aware of this new elements existence and will not
  // process it. We retreive the cached form, add the element, and resave.
  $form = form_get_cache($form_build_id, $form_state);
  $form[$name] = $fields;
  form_set_cache($form_build_id, $form, $form_state);
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
  );
  // Rebuild the form.
  $form = form_builder($_POST['form_id'], $form, $form_state);


  // Render the new output.
  $new_form = $form[$name];
  return drupal_render($new_form);
}

/**
 * Does the very standard things that must be done in any normal callback.
 * Used by each callback in this example module.
 */
function wsuser_ahah_callback_helper() {
  $form_state = array(
    'storage' => NULL,
    'submitted' => FALSE,
  );
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  // Enable the submit/validate handlers to determine whether AHAH-submittted.
  $form_state['ahah_submission'] = TRUE;
  $form['#programmed'] = $form_state['#redirect'] = FALSE;
  drupal_process_form($form_id, $form, $form_state);
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  return $form;
}


/**
 * Provides an action that can be used with rules which will resend the
 * validation link a la logintoboggan
 *
 * @param $object
 * @param $context
 */
function wsuser_resend_validation_link_action($object, $context) {
  $account = $object;

  $languages = language_list();
  $language = $languages[$account->language];

  $params['account'] = $account;
  $params['login_url'] = wsuser_validate_url($account);

  if (in_array('pre-authorized', $account->roles) && module_exists('logintoboggan')) {
    drupal_mail('wsuser', 'logintoboggan_resend_validation', $account->mail, $language, $params);
    watchdog('logintoboggan', 'A validation email has been sent to %account in language %language', array(
      '%account' => $account->name,
      '%language' => $account->language
    ));
  }
}

/**
 * Returns a validation URL normalized to the user's selected language
 * Of course, this is from logintoboggan_eml_validate_url(), but had to be
 * forked because logintoboggan doesn't actualy respect language.
 *
 * @param $account
 * @return string
 */
function wsuser_validate_url($account) {
  $languages = language_list();
  $language = $languages[$account->language];

  $timestamp = REQUEST_TIME;
  return url("user/validate/{$account->uid}/{$timestamp}/" . logintoboggan_eml_rehash($account->pass, $timestamp, $account->mail, $account->uid), array(
    'absolute' => TRUE,
    'language' => $language
  ));
}

/**
 * Returns a onetime-login link properly set up for the language of the user.
 * Adapted from user_pass_reset_url()
 *
 * @param $account
 * @return string
 */
function wsuser_pass_reset_url($account) {
  $languages = language_list();
  $language = $languages[$account->language];

  $timestamp = REQUEST_TIME;
  return url("user/reset/$account->uid/$timestamp/" . user_pass_rehash($account->pass, $timestamp, $account->login, $account->uid), array(
    'absolute' => TRUE,
    'language' => $language
  ));
}

/**
 * Search form for search block.
 *
 * @param $form_state
 */
function wsuser_member_search_form($form, &$form_state) {

  $form['search_by_name'] = array(
    '#title' => t('Search by name'),
    '#type' => 'fieldset',
  );
  $form['search_by_name']['user'] = array(
    '#title' => t('Search by name'),
    '#type' => 'textfield',
    '#size' => 15,
  );
  $form['search_by_name']['user_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
    '#submit' => array('wsuser_member_search_form_user_submit'),
  );

  $form['search_by_location'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search by location'),
  );
  $browser_location = user_location_get_browser_country();
  $browser_location = !empty($browser_location) ? $browser_location : 'us';
  $country = !empty($form_state['values']['country']) ? $form_state['values']['country'] : $browser_location;
  $form['search_by_location']['country'] = array(
    '#title' => t('Country'),
    '#type' => 'select',
    '#required' => TRUE,
    '#options' => _locationservices_supported_countries(),
    '#default_value' => $country,
    '#ajax' => array(
      'callback' => 'wsuser_country_change_callback',
      'wrapper' => 'search_by_location_city',
    ),

  );
  $city = !empty($form_state['values']['city']) ? $form_state['values']['city'] : '';
  $form['search_by_location']['city'] = array(
    '#title' => t("City or State/Province"),
    '#description' => t('Optionally type a few letters of the city or province and wait.'),
    '#default_value' => $city,
    '#type' => 'textfield',
    '#size' => 20,
    '#autocomplete_path' => 'location_autocomplete/' . $country,
    '#prefix' => '<div id="search_by_location_city">',
    '#suffix' => '</div>',
  );

  // We don't want to let them use the "map" button if we're not on the map page.
  // But this is probably incorrectly looking to see if we're on the *front*
  // page, which is probably not generic enough.
  // @todo: Make it *go* to the map page; allow the map button but make it go
  // to the map page.
  if (drupal_is_front_page()) {
    $form['search_by_location']['map_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Map'),
    );
  }
  $form['search_by_location']['list_submit'] = array(
    '#type' => 'submit',
    '#value' => t('List'),
    '#submit' => array('wsuser_member_search_form_list_submit'),
    '#validate' => array('wsuser_member_search_form_list_validate'),
  );

  return $form;
}

/**
 * Validate the city to make sure it contains something useful. Get lat/lon if possible.
 *
 * @param $form
 * @param $form_state
 */
function wsuser_member_search_form_list_validate($form, &$form_state) {
  $city = $form_state['values']['city'];
  $country = $form_state['values']['country'];

  if (!empty($country) && !empty($city)) {
    list($placename, $latitude, $longitude) = preg_split('/\|/', $form_state['values']['city']);
    if (!is_numeric($latitude) || !is_numeric($longitude)) {
      $result = db_query_range('
          SELECT DISTINCT g.name cityname, a.name provname, g.country_code,
  		     latitude, longitude, g.admin1_code, g.feature_code
  	       FROM {geonames} g, {geonames_adm1} a
  	       WHERE g.country_code = :country
  		     AND g.ansiname LIKE :name_pattern
  		     AND feature_code IN ("ppl", "ppla", "ppla2", "ppla3", "ppla4", "pplc", "pplf", "ppls", "adm1", "adm2")
  		     AND g.country_code = :country_code
  		     AND g.admin1_code = a.adm1_code
  		     AND (population > :min_population OR feature_code = "adm1")
  		     ORDER BY (feature_code = :feature_code) DESC, g.population DESC',
        0, 1,  // We only want one result here for validation
        array(
          ':country' => $country,
          ':min_population' => 100,
          ':name_pattern' => db_like($city) . '%',
        ));
      if ($result && $location = db_fetch_array($result)) {
        $latitude = $location['latitude'];
        $longitude = $location['longitude'];
        $form_state['values']['city'] = "$placename|$latitude|$longitude";
        return;
      }
    }
  }
  else {
    if (!empty($country)) {
      $location = locationservices_country_position_from_country($country);
      $form_state['values']['city'] = "$location->country|$location->latitude|$location->longitude";
    }
  }

}


/**
 * Redirect to wsuser/search if we have lat/lon to work with.
 *
 * @param $form
 * @param $form_state
 */
function wsuser_member_search_form_list_submit($form, &$form_state) {
  if (!empty($form_state['values']['city'])) {
    list($place, $lat, $lon) =
      $form_state['redirect'] = 'search/wsuser/' . $form_state['values']['city'];
  }
}

/**
 * Submit handler for wsuser_member_search_form()
 *
 * @param $form
 * @param $form_state
 */
function wsuser_member_search_form_user_submit($form, &$form_state) {
  $form_state['redirect'] = 'search/wsuser/' . $form_state['values']['user'];
}

/**
 * AJAX callback for search form, based on AJAX Example D7 project, http://drupal.org/project/examples
 */
function wsuser_country_change_callback($form, $form_state) {
  return $form['search_by_location']['city'];
}

/**
 * Implements hook_preprocess().
 *
 * Provides data to theme functions.
 *
 * @param $variables
 * @return mixed
 */
function wsuser_preprocess(&$variables, $key) {
  $themes = array(
    'user_profile',
    'wsuser_member_contact_location',
    'wsuser_member_actions',
    'wsuser_member_donate',
    'wsuser_member_profile_highlight',
  );
  // Only process further for the user account related theme functions above.
  if (!in_array($key, $themes)) {
    return;
  }
  // Only process further if a user account object can be obtained from the current path.
  if (!$account = menu_get_object('user')) {
    return;
  }

  $provincemap = _locationservices_get_provincecode_to_province_map($account->country);
  $countrylist = _locationservices_supported_countries();
  $countryname = !empty($countrylist[$account->country]) ? $countrylist[$account->country] : t('Unknown');
  $provincename = !empty($provincemap[$account->province]) ? $provincemap[$account->province] : t('Unknown');

  $variables['fieldlist'] = $fieldlist = wsuser_fieldlist();

  // Get services list as ul list
  $services = array(
    "bed",
    "food",
    "laundry",
    "lawnspace",
    "sag",
    "shower",
    "storage",
    "kitchenuse",
  );
  foreach ($services as $item) {
    if (!empty($variables['account']->$item)) {
      $variables['services'] .= "<li>" . t($fieldlist[$item]['title']) . "</li>";
    }
  }

  $variables['hide_donation_status'] = $account->hide_donation_status;
  $variables['email_opt_out'] = $account->email_opt_out;

  // Define the items array used to generate the stats list.
  $items = array();
  // Get global "Stat" - feedback count and link.
  $reference_count = wsuser_count_user_references($account->uid);
  $reference_link = 'user/' . $account->uid . '/recommendations_of_me';
  $items[] = array(
    'data' => l(t('Feedback (!count)', array('!count' => $reference_count)), $reference_link, array('html' => TRUE)),
    'class' => array('number', 'recommendation-summary'),
  );
  // Get global "Stat" - length of membership.
  $member_for = format_interval(REQUEST_TIME - $account->created);
  $items[] = array(
    'data' => t('Member for %years', array('%years' => $member_for)),
    'class' => array('number', 'member-for'),
  );
  // Get global "Stat" - last accessed account.
  $last_access = format_interval(REQUEST_TIME - $account->access);
  $items[] = array(
    'data' => t('Active !when ago', array('!when' => $last_access)),
    'class' => array('number', 'last-login'),
  );
  // Get personal "Stat" - languages spoken.
  $variables['languagesspoken'] = check_plain($account->languagesspoken);
  $items[] = array(
    'data' => t('Languages Spoken: %languages', array('%languages' => $variables['languagesspoken'])),
    'class' => array('personal', 'languages-spoken'),
  );
  // Get personal "Stat" - personal website address.
  $url = !empty($account->URL) ? l($account->URL, $account->URL) : '';
  $items[] = array(
    'data' => t('Personal Website: !url', array('!url' => $url)),
    'class' => array('personal', 'personal-website'),
  );
  // Get personal "Stat" - user ID.
  $items[] = array(
    'data' => t('UID: %uid', array('%uid' => $account->uid)),
    'class' => array('personal', 'uid'),
  );
  // Get personal "Stat" - username.
  $items[] = array(
    'data' => t('Username: %username', array('%username' => $account->name)),
    'class' => array('personal', 'uid'),
  );
  // Get personal "Stat" - availability.
  $return_date = $account->becomeavailable ? format_date($account->becomeavailable, 'custom', 'Y-m-d') : t('not specified');
  $items[] = array(
    'data' => empty($account->notcurrentlyavailable) ? t('Currently Available') : t('Not Currently Available - expected return @date', array('@date' => $return_date)),
    'class' => array('personal', 'availability'),
  );
  // Get personal "Stat" - availability.
  if (user_access('administer users')) {
    $items[] = array(
      'data' => empty($account->roles[9]) ? t("Validated") : t("NOT Validated"),
      'class' => array('personal', 'validated'),
    );
    if (!$account->status) {
      // IN this case we should change the colors on the page or something.
      $items[] = array(
        'data' => t('BLOCKED'),
        'class' => array('personal', 'blocked'),
      );
    }
    $mandrill_link = l('Mandrill', "https://mandrillapp.com/activity?date_format=mm%2Fdd%2Fyy&q={$account->mail}&date_range=60&start_date=04%2F20%2F2014&stop_date=04%2F27%2F2014&tag=_all&sender=&search-select-q=&api_key=&__csrf_token=04d6a6210707c59df11d022e55a86a8a09623eba", array('absolute' => TRUE));
    $items[] = array(
      'data' => $mandrill_link,
      'class' => array('personal', 'mandrill'),
    );
  }

  if (!empty($items)) {
    $variables['stats'] = theme('item_list', array('items' => $items));
  }

  // Sanitize and set main account variables.
  $variables += array(
    'account' => $account,
    'uid' => $account->uid,
    'username' => check_plain($account->name),
    'fullname' => check_plain($account->fullname),
    'homephone' => check_plain($account->homephone),
    'mobilephone' => check_plain($account->mobilephone),
    'workphone' => check_plain($account->workphone),
    'street' => check_plain($account->street),
    'additional' => check_plain($account->additional),
    'city' => check_plain($account->city),
    'province' => $provincename,
    'country' => strtoupper($account->country),
    'postal_code' => check_plain($account->postal_code),
    'latitude' => $account->latitude,
    'longitude' => $account->longitude,
    'source' => $account->source,
    'reference_count' => $reference_count,
    'last_login' => format_interval(REQUEST_TIME - $account->login),
    'URL' => $url,
    'preferred_notice' => check_plain($account->preferred_notice),
    'maxcyclists' => $account->maxcyclists < 5 ? $account->maxcyclists : t('5 or more'),
    'motel' => check_plain($account->motel),
    'campground' => check_plain($account->campground),
    'bikeshop' => check_plain($account->bikeshop),
    'notcurrentlyavailable' => $account->notcurrentlyavailable,
    'is_self' => $account->uid == $GLOBALS['user']->uid,
    'return_date' => $return_date,
  );

  // Get private message respnosiveness variables.
  list($variables['pm_responsiveness'], $variables['pm_requests'], $variables['pm_responses'], $variables['pm_start_date'], $variables['pm_responsiveness_over_full_period']) = wsuser_privatemsg_responsiveness($account);
  $variables['pm_start_date'] = date('Y-m-d', $variables['pm_start_date']);

  // Generate the theme account picture or a scolding mesage if none is present.
  if (isset($account) && !empty($account->picture)) {
    $variables['user_picture'] = theme('user_picture', array('account' => $account));
  } else {
    $variables['user_picture'] = '<p class="photo-scolding">' . t('You have not uploaded a picture yet. Please upload a picture to improve your chances to find hosts or guests. !link', array('!link' => l(t('Upload your picture by editing your profile.'), 'user/' . $account->uid . '/edit'))) . '</p>';
  }
}


/**
 * Return a count of the feedback a user has received.
 *
 * @param $uid
 */
function wsuser_count_user_references($uid) {

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'trust_referral')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_member_i_trust', 'uid', $uid);

  $count = $query->count()->execute();
  return $count;
}


/**
 * Simple admin detail page, for admin info only.
 *
 * @param $account
 * @return string
 */
function wsuser_admin_details_page($account) {
  $created = format_date($account->created, 'long', '', 'MDT');
  $languages = language_list();
  $domain = $languages[$account->language]->domain;
  $validate_link = "{$domain}/toboggan/revalidate/{$account->uid}";

  $mandrill_link = "https://mandrillapp.com/activity/?q=" . urlencode($account->mail);
  if (empty($account->roles[2])) {
    $status = "<strong>NOT Validated</strong> (<a href='{$validate_link}'>Resend validation link</a>";
  }
  else {
    $status = "<strong>Validated</strong>";
  }
  $link = l($account->fullname, 'user/' . $account->uid);
  drupal_set_title(t('Admin Details for @fullname', array('@fullname' => $account->fullname)), PASS_THROUGH);
  $comments = check_markup($account->comments);

  $output = <<<END
{$link} (<a href="/user/{$account->uid}/edit">edit</a>)<br/>
<strong>UID:</strong> {$account->uid}<br/>
<strong>Username:</strong> {$account->name}<br/>
<strong>Mail:</strong> <a href="mailto:{$account->mail}">{$account->mail}</a><br/>
{$status} <br/>
<strong>Created:</strong> {$created} <br/>
<strong><a href="{$mandrill_link}">Mandrill emails</a></strong><br/>
<strong>About Me:</strong><br/>
{$comments}</br>
END;

  return $output;
}

/**
 * Calculate responsiveness to privatemsgs (initial privatemsg) for a user.
 *
 * @param $account
 *   - User account being analyzed
 * @return array
 *   - responsiveness percent OR 'N/A'
 *   - number of requests initiated by others (int)
 *   - number of responses to requests initiated by others (int)
 *   - beginning of timeframe
 *   - TRUE if timeframe is greater than a year
 */
function wsuser_privatemsg_responsiveness($account) {
  $uid = $account->uid;
  static $result = array();
  if (!empty($result[$uid])) {
    return $result[$uid];
  }
  // Set the default calculation period to 1 year, adjusted for less for new users.
  $period = max($account->created, REQUEST_TIME - variable_get('wsuser_privatemsg_responsiveness_period', 31536000));

  $calculated_over_full_year = ($period != $account->created);

  $received = db_query('SELECT COUNT(DISTINCT(thread_id)) FROM {pm_index} pi, {pm_message} pm WHERE pm.mid = pi.mid AND pi.mid = pi.thread_id AND pm.author <> :uid AND pi.recipient = :uid AND pi.deleted <> 1 AND pm.timestamp > :period', array(
    ':uid' => $uid,
    ':period' => $period
  ))->fetchField();

  if (empty($received)) {
    $result[$uid] = array(
      t('N/A'),
      0,
      0,
      $period,
      $calculated_over_full_year
    );
  }
  else {
    // Use magic value of pi.deleted == 1 to indicate that a message should not be counted. This lets us exclude problem
    // messages. UPDATE pm_index pi SET deleted=1 WHERE pi.recipient=<uid> AND pi.thread_id=<thread_id>;
    $responded = db_query('
      SELECT COUNT(DISTINCT(thread_id)) FROM {pm_index} pi INNER JOIN {pm_message} pm ON pm.mid=pi.mid
      WHERE pm.author = :uid AND pi.thread_id IN
        (SELECT DISTINCT(thread_id)
         FROM {pm_index} pi, {pm_message} pm
         WHERE pm.mid = pi.mid AND pi.mid = pi.thread_id
         AND pm.author <> :uid
         AND pi.recipient = :uid
         AND pi.deleted <> 1
         AND pm.timestamp > :period)
      ', array(':uid' => $uid, ':period' => $period))->fetchField();

    $responsiveness = number_format(100 * $responded / $received);
    $result[$uid] = array(
      $received ? $responsiveness . '%' : t('N/A'),
      $received,
      $responded,
      $period,
      $calculated_over_full_year
    );
  }
  return $result[$uid];
}

/*
 * Implements hook_cron()
 */
function wsuser_cron() {
  _wsuser_process_users_that_become_available();
  _wsuser_queue_notavailable_reminders();
}

/*
 * Queue up reminders for users who are not currently available and who have
 * not set set a becomeavailable.
 */
function _wsuser_queue_notavailable_reminders() {

  $now = REQUEST_TIME;

  // Get interval of email reminders (default to two months).
  $period = variable_get('wsuser_last_notavailable_reminder_period', 60 * 60 * 24 * 61);

  // Limit number of users to remind per run
  // (default lets us get out of trouble if something goes wrong).
  // Theoretically it would only send out 25 per day.
  $limit = variable_get('wsuser_num_users_to_remind_per_run', 25);

  // Query deconstruction:
  // Select all members who are explicitly marked not available
//   WITH no becomeavailable date (NULL), meaning they haven't set a becomeavailable
  // We won't bother with people who have set a becomeavailable, even if in the far future.
  // We use a limit just so that debugging is easier and we don't flood ourself
  // with loads of emails. However, this should not matter in practice on the live
  // site.
  // This is actually aimed only at existing current members who are set to notcurrentlyavailable
  // Theoretically they will all eventually set a becomeavailable date, even
  // far in the future.
  $result = db_query_range(
    'SELECT u.mail, u.language, u.uid, ws.last_unavailability_pester
      FROM {users} u, {wsuser} ws
      WHERE u.uid = ws.uid
      AND ws.notcurrentlyavailable = 1
      AND (ws.becomeavailable = 0 OR ws.becomeavailable IS NULL)
      AND (ws.last_unavailability_pester IS NULL OR (ws.last_unavailability_pester + :period < :now))',
    0, $limit,
    array(
      ':period' => $period,
      ':now' => $now
    ), array('fetch' => PDO::FETCH_OBJ));

  $queue = DrupalQueue::get('wsuser_process_notavailable_reminders');

  foreach ($result as $row) {
    $job = array(
      'description' => t('Send notavailable reminder email to @mail',
        array('@mail' => $row->mail)),
      'arguments' => array($row),
    );
    $queue->createItem($job);
    watchdog('wsuser_pester', 'Sent unavailable_pester to %mail, last_unavailability_pester=%pester', array(
      '%mail' => $row->mail,
      '%pester' => date('c', $row->last_unavailability_pester)
    ));

    // Update the wsuser now to make sure we don't hit this member again.
    try {
      db_update('wsuser')
        ->fields(array(
          'last_unavailability_pester' => $now,
        ))
        ->condition('uid', $row->uid)
        ->execute();
    } catch (Exception $e) {
      watchdog_exception('wsuser', $e);
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 *
 * Set up cron queues for wsuser.
 */
function wsuser_cron_queue_info() {
  return array(
    'wsuser_process_notavailable_reminders' => array(
      'worker callback' => '_wsuser_send_notavailable_reminders',
    ),
  );
}

/**
 * @param $job
 *
 * Send the reminder mails queued up from cron run
 */
function _wsuser_send_notavailable_reminders($job) {

  $languages = language_list();
  $row = $job['arguments'][0];
  $now = REQUEST_TIME;

  drupal_mail('wsuser', 'notavailable_reminder', $row->mail, $languages[$row->language], array('account' => user_load($row->uid)));
}

/***
 * Admin form for wsuser configuration items.
 *
 * @return mixed
 */
function wsuser_configuration($form, &$form_state) {
  $form = array();
  $form['wsuser_reminder_email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Not Available Reminder Email'),
  );
  $form['wsuser_reminder_email']['wsuser_notavailable_reminder_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Warmshowers user Not Available Reminder Email Subject'),
    '#default_value' => variable_get('wsuser_notavailable_reminder_subject', 'Your Warmshowers account is marked unavailable. Please update your return date. ([fullname])'),
  );
  $form['wsuser_reminder_email']['wsuser_notavailable_reminder_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Warmshowers user Not Available Reminder Email Body'),
    '#default_value' => variable_get('wsuser_notavailable_reminder_body', "Hi [fullname], <br/><br/>Your warmshowers.org acount, [user], is marked as unavailable to host. Could you please log in and set the date that you expect to return? If you don't know when or if you'll be able to host, just put in a date like 2025-01-01. You can change it at any time. You can log in with your username and password at https://www.warmshowers.org or <a href='[login_url]'>click this link to log in automatically</a><br/><br/>-Randy Fay<br/>Warmshowers.org Webmaster<br/>---<br/><a href='[account-url]'>Profile link</a><br/><a href='[account-edit-url]'>Edit profile link</a><br/><a href='[login_url]'>Direct login link</a><br/>"),
  );
  $form['wsuser_reminder_email']['send_test_reminder_email'] = array(
    '#type' => 'submit',
    '#value' => t("Send test reminder email to the current logged-in user (in your language)"),
    '#submit' => array('wsuser_configuration_send_test_email'),
  );

  $form['wsuser_become_available_email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Notify Users They Are Now Available Email'),
  );
  $form['wsuser_become_available_email']['wsuser_become_available_notification_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Warmshowers user Notify Users They Are Now Available Email Subject'),
    '#default_value' => variable_get('wsuser_become_available_notification_subject', 'You are now listed as available to host on Warmshowers.org ([fullname])'),
  );
  $form['wsuser_become_available_email']['wsuser_become_available_notification_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Warmshowers user Notify Users They Are Now Available Email Body'),
    '#default_value' => variable_get('wsuser_become_available_notification_body', "Hi [fullname] - <br/><br/>Your Warmshowers.org account, [user], has been automatically updated to show you as \"available to host\" because the date that you specified you would become available after has passed. If you are still unavailable to host please log into Warmshowers.org and update your account. You can log in by visiting the site or just <a href='[login_url]'>clicking this link</a>. Thanks!<br/><br/>-Randy Fay<br/>Warmshowers.org Webmaster<br/>---<br/><a href='[account-url]'>Profile link</a><br/><a href='[account-edit-url]'>Edit profile link</a><br/><a href='[login_url]'>Direct login link</a><br/>"),
  );
  $form['wsuser_become_available_email']['send_test_become_available_email'] = array(
    '#type' => 'submit',
    '#value' => t("Send test become available email to the current logged-in user (in your language)"),
    '#submit' => array('wsuser_configuration_send_test_become_available_email'),
  );

  if (module_exists('token')) {
    $form['view']['token_help'] = array(
      '#title' => t('Replacement patterns'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['view']['token_help']['help'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('user'),
    );
  }

  return system_settings_form($form);
}

/**
 * Submit handler for sending reminder test email to user 1.
 *
 * @param $form
 * @param $form_state
 */
function wsuser_configuration_send_test_email($form, &$form_state) {
  $account = user_load($GLOBALS['user']->uid);
  wsuser_send_test_reminder_email($account->uid);
  drupal_set_message(t('Sent test reminder email to uid @uid username=@username', array(
    '@uid' => $account->uid,
    '@username' => $account->name
  )));
}

/**
 * Diagnostic to send test reminder emails. It's too hard otherwise.
 *
 * @param int $uid
 */
function wsuser_send_test_reminder_email($uid = 1) {
  $now = REQUEST_TIME;

  $result = db_query(
    'SELECT u.mail, u.language, u.uid
    FROM {users} u, {wsuser} ws
    WHERE u.uid = ws.uid
    AND u.uid = :uid',
    array(':uid' => $uid), array('fetch' => PDO::FETCH_OBJ));

  $queue = DrupalQueue::get('wsuser_process_notavailable_reminders');

  foreach ($result as $row) {

    $job = array(
      'description' => t('Send marked as not available reminder email to @mail',
        array('@mail' => $row->mail)),
      'arguments' => array($row),
    );
    $queue->createItem($job);
  }

  // Start workers for queued items immediately, without adding any additional items or running cron.
  drupal_cron_run();
}

/**
 * Test become_available_notification on uid 1
 *
 * @param int $uid
 */
function wsuser_configuration_send_test_become_available_email($form, $form_state) {
  $account = user_load($GLOBALS['user']->uid);
  $languages = language_list();
  drupal_mail('wsuser', 'become_available_notification', $account->mail, $languages[$account->language], array('account' => $account));
  drupal_set_message(t('Sent become_available_email to uid @uid (@username)', array(
    '@uid' => $account->uid,
    '@username' => $account->name
  )));
}


/*
 * Mark as available to host all users whose 'become available' date has passed, and notify them of this change.
 */
function _wsuser_process_users_that_become_available() {
  $now = REQUEST_TIME;

  // Select for notification all unavailable users that set a 'become available' date that has passed.
  $result = db_query(
    'SELECT u.mail, u.language, u.uid, u.name, ws.fullname
    FROM {users} u, {wsuser} ws
    WHERE u.uid = ws.uid
    AND ws.notcurrentlyavailable = 1
    AND ws.becomeavailable IS NOT NULL
    AND ws.becomeavailable <> 0
    AND ws.becomeavailable < :now',
    array(':now' => $now), array('fetch' => PDO::FETCH_OBJ));

  // Update these users to available to host and notify them via email.
  $languages = language_list();
  foreach ($result as $row) {
    // Update user to available to host.
    try {
      db_update('wsuser')
        ->fields(array(
          'notcurrentlyavailable' => 0,
        ))
        ->condition('uid', $row->uid)
        ->execute();
    } catch (Exception $e) {
      watchdog_exception('wsuser', $e);
    }


    // Notify user via email that they are now marked as available to host.
    drupal_mail('wsuser', 'become_available_notification', $row->mail, $languages[$row->language], array('account' => user_load($row->uid)));
    watchdog('wsuser', 'Set username @user (@fullname) to available and sent notification to @mail', array(
      '@user' => $row->name,
      '@fullname' => $row->fullname,
      '@mail' => $row->mail
    ), WATCHDOG_NOTICE, "https://www.warmshowers.org/user/{$row->uid}");
  }
}


/**
 * Returns the roles that indicate paid membership
 *
 * TODO: Consider reworking these with user_roles() and a permission...
 */
function wsuser_paid_roles() {
  $paid_roles = variable_get('wsuser_paid_roles_array', array(
    19 => t('Basic'),
    20 => t('Supporter'),
    22 => t('Founder (Obsolete)'),
    23 => t('Founder'),
    25 => t('Maintainer'),
  ));
  return $paid_roles;
}

/**
 * Return roles indicating unpaid membership
 */
function wsuser_unpaid_roles() {
  $unpaid_roles = variable_get('wsuser_unpaid_roles_array', array(
    18 => t('Free'),
  ));
  return $unpaid_roles;
}

/**
 * Return TRUE if current paid-up member
 *
 * @param $account
 * @return bool
 */
function wsuser_is_current_donor_member($account) {
  $paid_roles = array_intersect(array_keys($account->roles), array_keys(wsuser_paid_roles()));
  if (!empty($paid_roles)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Return true if has current "membership" but is one of the free ones
 */
function wsuser_is_nondonor_member($account) {
  $unpaid_roles = array_intersect(array_keys($account->roles), array_keys(wsuser_unpaid_roles()));
  if (!empty($unpaid_roles)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Return localized name of highest membership role
 *
 * @param $account
 * @return array of role => name
 */
function wsuser_highest_donation_level($account) {
  if (wsuser_is_current_donor_member($account)) {
    $highest = max(array_intersect(array_keys($account->roles), array_keys(wsuser_paid_roles())));
    $roles = wsuser_paid_roles();
    return array($highest => $roles[$highest]);
  }
  return FALSE;
}

/**
 * Implements hook_uc_order to catch the payment receipt and update donortools().
 *
 * @param $op
 * @param $order
 * @param $new_status
 */
function wsuser_uc_order($op, $order, $new_status) {
  if ($op == 'update' && $new_status == 'payment_received' && $order->order_total > 0) {
    $fund_id = "45650";
    $donation_type_id = "3838";
    $source_id = "32597";
    $account = user_load($order->uid);
    $order_comment_list = uc_order_comments_load($order->order_id);
    $amount_in_cents = $order->order_total * 100;
    $amount_in_cents = "$amount_in_cents";
    $comments = "";
    foreach ($order_comment_list as $comment) {
      $comments .= $comment->message . " ";
    }

    $join_date = date('Y-m-d', $account->created);
    $products = $order->products;
    $comments .= "
Member Join Date: {$join_date}
Language: {$account->language} ({$account->languagesspoken})
https://www.warmshowers.org/user/{$order->uid}
Order: https://www.warmshowers.org/admin/store/orders/{$order->order_id}
";
    foreach ($products as $product) {
      $comments .= $product->model . ": ";
      if (!empty($product->data['attributes']['Options'])) {
        foreach ($product->data['attributes']['Options'] as $option) {
          $comments .= " $option";
        }
      }
    }


    // Make sure fullname is utf-8
    $fullname = $account->fullname;
    $fullname = ucwords(mb_strtolower($fullname, 'UTF-8'));
    $fullname = iconv(mb_detect_encoding($fullname, mb_detect_order(), TRUE), "UTF-8", $fullname);
    // Then make sure each word is capitalized, to avoid the Donortools bug with parsing
    $donortools_info = array(
      'donation' => array(
        'amount_in_cents' => $amount_in_cents,
        'memo' => $comments,
        'received_on' => date('Y-m-d'),
        'source_id' => $source_id, // Our only allowed source id
        'donation_type_id' => $donation_type_id, // Custom Site Donate Page
        'find_or_create_person' => array(
          'full_name' => $fullname,
          'email_address' => $account->mail,
          'state' => $account->province,
          'country' => $account->country,
        ),
        'splits' => array(
          array(
            'amount_in_cents' => $amount_in_cents,
            'fund_id' => $fund_id,
            'memo' => "",
          ),
        ),
      )
    );
    $json = json_encode($donortools_info);
    $url = variable_get('wsuser_donortools_url', 'https://randy@randyfay.com:ddt4qXiOA31f@warmshowers.donortools.com/donations.json');
    $result = drupal_http_request($url, array(
      'headers' => array('Content-type' => 'application/json'),
      'method' => 'POST',
      'data' => $json,
      '' => 12
    ));
    if ($result->code != "201") {
      watchdog('wsuser', "Donortools update failure order=!order, !result", array(
        '!order' => $order->order_id,
        '!result' => print_r($result, TRUE)
      ), WATCHDOG_ERROR);
    }
    $current = variable_get('donations_thermometer_amount', 1000);
    variable_set('donations_thermometer_amount', $current + $order->order_total);
  }
}

/**
 * Return expiration of stated role
 *
 * @param $account
 * @param $rid
 * @return bool
 */
function wsuser_uc_role_expiration($account, $rid) {
  $expires = db_query("SELECT expiration FROM {uc_roles_expirations} WHERE uid = :uid AND rid = :rid AND expiration > :expiration", array(
      ':uid' => $account->uid,
      ':rid' => $rid,
      ':expiration' => REQUEST_TIME,
    )
  )->fetchField();
  return $expires;
}


/**
 * Admin form allowing changing user created, access dates, etc.
 *
 * @return mixed
 */
function wsuser_change_user_dates_form($form, &$form_state, $account) {
  $form['#user'] = $account;
  $form['changedates'] = array(
    '#title' => t("<b>Change user dates</b>"),
    '#description' => t("Change the database dates on a user"),
    '#type' => 'fieldset',
  );

  $form['changedates']['instructions'] = array(
    '#type' => 'markup',
    '#value' => "<h4>Changing dates for user $account->name ($account->fullname)</h4><p>Use this form to update the created or last-login date of a user.
					The last-login date is used to determine when the user is 'stale' and should
					be retired, contacted, perhaps removed from the system.</p>",
  );
  $form['changedates']['created'] = array(
    '#type' => 'textfield',
    '#size' => 10,
    '#maxlength' => 10,
    '#title' => 'New created date (currently ' . date('Y-m-d', $account->created) . ")",
    '#description' => t("In the form YYYY-MM-DD. Leave it blank to leave it unchanged."),
  );
  $form['changedates']['login'] = array(
    '#type' => 'textfield',
    '#size' => 10,
    '#maxlength' => 10,
    '#title' => t("New last-login date (currently last-login is " . date('Y-m-d', $account->login) . " and access is " . date('Y-m-d', $account->access) . ")"),
    '#description' => t("In the form YYYY-MM-DD. Leave it blank to leave it unchanged."),
  );
  $form['changedates']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;

}

function wsuser_change_user_dates_form_validate($form, &$form_state) {
  $created = $form_state['values']['created'];
  $changed = $form_state['values']['login'];
  if (strlen($created) && strtotime($created) < 100) {
    form_set_error('created', "Created date must be in the form YYYY-MM-DD");
  }
  if (strlen($changed) && strtotime($changed) < 100) {
    form_set_error('login', "Login date must be in the form YYYY-MM-DD");
  }
}

function wsuser_change_user_dates_form_submit($form, &$form_state) {

  $account = $form['#user'];
  $edits = array();

  if (strlen($form_state['values']['created'])) {
    $edits['created'] = strtotime($form_state['values']['created']);
  }
  if (strlen($form_state['values']['login'])) {
    $edits['login'] = strtotime($form_state['values']['login']);
    $edits['access'] = $edits['login'];
  }
  try {
    user_save($account, $edits);
  } catch (Exception $e) {
    drupal_set_message(t('Failed to update account. More information in log'));
    watchdog_exception('wsuser', $e);
  }
}


/**
 * Provide member counts page.
 *
 * @return string
 */
function wsuser_country_counts() {

  $cache_key = 'wsuser_country_counts_html_' . @$_GET['sort'] . @$_GET['order'] . $GLOBALS['language']->language;
  $cached = cache_get($cache_key);
  if (!empty($cached->data)) {
    return $cached->data;
  }
  watchdog('wsuser', 'Rebuilding country_counts page');

  $page = array();

  // Total user counts
  $totalusers = db_select('users', 'u')
    ->condition('u.status', 1)
    ->countQuery()
    ->execute()
    ->fetchField();

  $query = db_select('users', 'u');
  $query->join('wsuser', 'w', 'u.uid = w.uid');
  $totalhosts = $query
    ->condition('u.status', 1)
    ->condition('w.notcurrentlyavailable', 0)
    ->countQuery()
    ->execute()
    ->fetchField();

  $page['totalusers'] = array(
    '#markup' => '<h3>' . t('%totalusers Warmshowers members, %totalhosts of them hosting right now.', array(
        '%totalusers' => number_format($totalusers),
        '%totalhosts' => number_format($totalhosts)
      )) . '</h3>'
  );
  $page['instructions'] = array('#markup' => '<p>' . t('Click the headers to change sort order.') . '</p>');


  // Members by continent
  $page['continent']['title']['#markup'] = '<h3 id="continent">' . t('Members by Continent') . '</h3>';

  $continents = array(
    'AF' => t('Africa'),
    'SA' => t('South America') . '&nbsp;&nbsp;',
    'NA' => t('North America') . '&nbsp;&nbsp;',
    'EU' => t('Europe'),
    'OC' => t('Oceania'),
    'AS' => t('Asia'),
  );
  $header = array(
    array('data' => t('Continent'), 'field' => 'continent', 'sort' => 'asc'),
    array('data' => t('Members On Continent'), 'field' => 'members'),
    array('data' => t('Percent'), 'field' => 'percent'),
  );

  $query = db_select('users', 'u', array('fetch' => PDO::FETCH_ASSOC))->extend('TableSort');
  $query->join('wsuser', 'w', 'u.uid = w.uid');
  $query->join('user_location', 'ul', 'u.uid = ul.oid');
  $query->join('geonames_countryinfo', 'g', 'ul.country = g.iso_alpha2');
  $query->fields('g', array('continent'))
    ->condition('u.status', 1)
    ->addExpression('COUNT(*)', 'members');
  $query->addExpression('ROUND((COUNT(*) * 100)/:total, 0)', 'percent', array(':total' => $totalusers));
  $query->groupBy('g.continent');
  $result = $query->orderByHeader($header)->execute();

  foreach ($result as $row) {
    $row['continent'] = $continents[$row['continent']];
    $rows[] = array('data' => $row);
  }

  // Build the table for the nice output.
  $page['continent']['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );


  // Members by country
  $page['country']['title']['#markup'] = '<h3 id="country">' . t('Members by country') . '</h3>';

  $header = array(
    array('data' => t('Country Name'), 'field' => 'name', 'sort' => 'asc'),
    array('data' => t('Country Code') . '&nbsp;&nbsp;', 'field' => 'country'),
    array('data' => t('Members In Country'), 'field' => 'members'),
  );
  $rows = array();

  $query = db_select('users', 'u', array('fetch' => PDO::FETCH_ASSOC))->extend('TableSort');
  $query->join('wsuser', 'w', 'u.uid = w.uid');
  $query->join('user_location', 'ul', 'u.uid = ul.oid');
  $query->join('geonames_countryinfo', 'g', 'ul.country = g.iso_alpha2');
  $query->fields('g', array('name'))
    ->fields('ul', array('country'))
    ->condition('u.status', 1)
    ->addExpression('COUNT(*)', 'members');
  $query->groupBy('g.name');
  $result = $query->orderByHeader($header)->execute();

  foreach ($result as $row) {
    $row['members'] = number_format($row['members']);
    $rows[] = $row;
  }
  // Build the table for the nice output.
  $page['country']['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );


  // Growth by Year Joined
  $page['growth']['title'] = "<h3 id='growth'>" . t('Growth by year joined') . '</h3>' . '<p>' . t('This actually only shows those who joined who are still members.') . '</p>';

  $header = array(
    array('data' => t('Year'), 'field' => 'year', 'sort' => 'asc'),
    array('data' => t('Members joined'), 'field' => 'members'),
  );
  $rows = array();

  $query = db_select('users', 'u', array('fetch' => PDO::FETCH_ASSOC))->extend('TableSort');
  $query->condition('u.status', 1)
    ->condition('created', 0, '<>')
    ->addExpression('YEAR(from_unixtime(created))', 'year');
  $query->addExpression('COUNT(*)', 'members');
  $query->groupBy('year');
  $result = $query->orderByHeader($header)->execute();

  foreach ($result as $row) {
    $row['members'] = number_format($row['members']);
    $rows[] = $row;
  }
  $page['growth']['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );


  // Membership by primary language
  $page['language']['title'] = "<h3 id='language'>" . t('Primary languages of members') . '</h3>';
  $header = array(
    array('data' => t('Language'), 'field' => 'name'),
    array('data' => t('Member Count'), 'field' => 'count', 'sort' => 'desc'),
  );
  $rows = array();

  $query = db_select('users', 'u', array('fetch' => PDO::FETCH_ASSOC))->extend('TableSort');
  $query->join('languages', 'l', 'u.language = l.language');
  $query->fields('l', array('name'));
  $query->addExpression('COUNT(*)', 'count');
  $query->groupBy('u.language');
  $rows = $query->orderByHeader($header)->execute()->fetchAll();

  $page['language']['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );


  // Global responsiveness stats (by year)? With explanation why starting in Sept 2013
  $page['responsiveness']['title']['#markup'] = "<h3 id='responsiveness'>" . t('Responsiveness to private messages/hosting requests') . '</h3>' . '<p>' . t('This could not be calculated before September 2013, when private messages started going through the site.') . '</p>';
  $header = array(
    array('data' => t('Year'), 'field' => 'year'),
    array(
      'data' => t('Message Threads (Hosting Requests)'),
      'field' => 'count'
    ),
    array('data' => t('Percent answered'), 'field' => 'responsive'),
  );
  $rows = array();

  // Note that this query isn't bad, but it depends on is_new, which is cleared
  // if the member *views* the message online, but doesn't respond.
  $query = db_select('pm_index', 'pi', array('fetch' => PDO::FETCH_ASSOC))->extend('TableSort');
  $query->join('pm_message', 'pm', 'pm.mid = pi.mid');
  $query->where('pi.recipient <> pm.author AND pi.mid = pi.thread_id');
  $query->condition('pm.timestamp', strtotime('2013-09-01'), '>');
  $query->addExpression('YEAR(FROM_UNIXTIME(pm.timestamp))', 'year');
  $query->addExpression('COUNT(*)', 'count');
  $query->addExpression('100 - 100*SUM(pi.is_new)/COUNT(*)', 'responsive');
  $query->groupBy('year');
  $result = $query->orderByHeader($header)->execute();

  foreach ($result as $row) {
    $row['responsive'] = number_format($row['responsive'], 1);
    $row['count'] = number_format($row['count']);
    $rows[] = $row;
  }
  $page['responsiveness']['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );


  // Positive and negative feedback numbers by year
  $page['feedback']['title']['#markup'] = "<h3 id='feedback'>" . t('Positive and Negative Feedback') . '</h3>';
  $header = array(
    array('data' => t('Year'), 'field' => 'year'),
    array('data' => t('Positive'), 'field' => 'positive_feedback_count'),
    array('data' => t('Pct Positive'), 'field' => 'positive_percent'),
    array('data' => t('Neutral'), 'field' => 'neutral_feedback_count'),
    array('data' => t('Pct Neutral'), 'field' => 'neutral_percent'),
    array('data' => t('Negative'), 'field' => 'negative_feedback_count'),
    array('data' => t('Pct Negative'), 'field' => 'negative_percent'),
    array('data' => t('Feedback for hosts'), 'field' => 'host_feedback_count'),
    array(
      'data' => t('Feedback for guests'),
      'field' => 'guest_feedback_count'
    ),
  );
  $rows = array();

  $field_rating_info = field_info_field('field_rating');
  $field_rating_table = key($field_rating_info['storage']['details']['sql'][FIELD_LOAD_CURRENT]);
  $field_hosting_date_info = field_info_field('field_hosting_date');
  $field_hosting_date_table = key($field_hosting_date_info['storage']['details']['sql'][FIELD_LOAD_CURRENT]);
  $field_guest_or_host_info = field_info_field('field_guest_or_host');
  $field_guest_or_host_table = key($field_guest_or_host_info['storage']['details']['sql'][FIELD_LOAD_CURRENT]);

  $query = db_select('node', 'n', array('fetch' => PDO::FETCH_ASSOC))->extend('TableSort');
  $query->join($field_rating_table, 'r', 'n.nid = r.entity_id AND n.vid = r.revision_id');
  $query->join($field_hosting_date_table, 'd', 'n.nid = d.entity_id AND n.vid = d.revision_id');
  $query->join($field_guest_or_host_table, 'gh', 'n.nid = gh.entity_id AND n.vid = gh.revision_id');
  $query->where('d.field_hosting_date_value IS NOT NULL');
  $query->addExpression('YEAR(d.field_hosting_date_value)', 'year');
  $query->addExpression('COUNT(IF(r.field_rating_value = \'Positive\', 1, NULL))', 'positive_feedback_count');
  $query->addExpression('COUNT( IF(r.field_rating_value = \'Positive\', 1, NULL)) / COUNT(*) * 100', 'positive_percent');
  $query->addExpression('COUNT(IF(r.field_rating_value = \'Neutral\', 1, NULL))', 'neutral_feedback_count');
  $query->addExpression('COUNT(IF(r.field_rating_value = \'Neutral\', 1, NULL)) / COUNT(*) * 100', 'neutral_percent');
  $query->addExpression('COUNT(IF(r.field_rating_value = \'Negative\', 1, NULL))', 'negative_feedback_count');
  $query->addExpression('COUNT(IF(r.field_rating_value = \'Negative\', 1, NULL)) / COUNT(*) * 100', 'negative_percent');
  $query->addExpression('COUNT(IF(gh.field_guest_or_host_value = \'host\', 1, NULL))', 'host_feedback_count');
  $query->addExpression('COUNT(IF(gh.field_guest_or_host_value = \'guest\', 1, NULL))', 'guest_feedback_count');
  $query->groupBy('year');
  $result = $query->orderByHeader($header)->execute();

  foreach ($result as $row) {
    $row['positive_percent'] = number_format($row['positive_percent'], 2);
    $row['neutral_percent'] = number_format($row['neutral_percent'], 2);
    $row['negative_percent'] = number_format($row['negative_percent'], 2);

    $rows[] = array_values($row);
  }
  $page['feedback']['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );

  cache_set($cache_key, $page, 'cache', time() + 86400); // Expire after 1 day
  return $page;

}
